import urllib2
import random
import time
import math

# CodeSkulptor import
#import simpleplot
#import codeskulptor
#codeskulptor.set_timeout(60)

# Desktop imports
#import matplotlib.pyplot as plt


############################################
# Provided code

def copy_graph(graph):
    """
    Make a copy of a graph
    """
    new_graph = {}
    for node in graph:
        new_graph[node] = set(graph[node])
    return new_graph

def delete_node(ugraph, node):
    """
    Delete a node from an undirected graph
    """
    neighbors = ugraph[node]
    ugraph.pop(node)
    for neighbor in neighbors:
        ugraph[neighbor].remove(node)
    
def targeted_order(ugraph):
    """
    Compute a targeted attack order consisting
    of nodes of maximal degree
    
    Returns:
    A list of nodes
    """
    # copy the graph
    new_graph = copy_graph(ugraph)
    
    order = []    
    while len(new_graph) > 0:
        max_degree = -1
        for node in new_graph:
            if len(new_graph[node]) > max_degree:
                max_degree = len(new_graph[node])
                max_degree_node = node
        
        neighbors = new_graph[max_degree_node]
        new_graph.pop(max_degree_node)
        for neighbor in neighbors:
            new_graph[neighbor].remove(max_degree_node)

        order.append(max_degree_node)
    return order
    


##########################################################
# Code for loading computer network graph

NETWORK_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_rf7.txt"


def load_graph(graph_url):
    """
    Function that loads a graph given the URL
    for a text representation of the graph
    
    Returns a dictionary that models a graph
    """
    graph_file = urllib2.urlopen(graph_url)
    graph_text = graph_file.read()
    graph_lines = graph_text.split('\n')
    graph_lines = graph_lines[ : -1]
    
    print "Loaded graph with", len(graph_lines), "nodes"
    
    answer_graph = {}
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        answer_graph[node] = set([])
        for neighbor in neighbors[1 : -1]:
            answer_graph[node].add(int(neighbor))
    return answer_graph

'''
Project 2 - Connected components and graph resilience
'''
import poc_queue

def bfs_visited(ugraph, start_node):
    '''
    Takes the undirected graph ugraph and the node start_node
    and returns the set consisting of all nodes that are visited
    by a breadth-first search that starts at start_node.
    '''
    node_queue = Queue()
    visited = set([start_node])
    node_queue.enqueue(start_node)
    
    while len(node_queue) > 0:
        one_node = node_queue.dequeue()
        for neighbor in ugraph[one_node]:
            if (neighbor in visited) == 0:
                visited.add(neighbor)
                node_queue.enqueue(neighbor)
            
    return visited

def cc_visited(ugraph):
    '''
    Takes the undirected graph ugraph and returns a list of sets,
    where each set consists of all the nodes (and nothing else)
    in a connected component, and there is exactly one set in the
    list for each connected component in ugraph and nothing else.
    '''
    remaining_nodes = set(ugraph.keys())
    connected_components = []
    while len(remaining_nodes) > 0:
        one_node = list(remaining_nodes)[0]
        connected_set = bfs_visited(ugraph, one_node)
        connected_components.append(connected_set)
        remaining_nodes.difference_update(connected_set)
        
    return connected_components

def largest_cc_size(ugraph):
    '''
    Takes the undirected graph ugraph and returns the size (an
    integer) of the largest connected component in ugraph.
    '''
    connected_components = cc_visited(ugraph)
    maxsize = 0
    for connected_set in connected_components:
        if len(connected_set) > maxsize:
            maxsize = len(connected_set)
            
    return maxsize

def compute_resilience(ugraph, attack_order):
    '''
    Takes the undirected graph ugraph, a list of nodes attack_order
    and iterates through the nodes in attack_order. For each node
    in the list, the function removes the given node and its edges
    from the graph and then computes the size of the largest connected
    component for the resulting graph.
    '''
    clst = [largest_cc_size(ugraph)]
    for idx in range(len(attack_order)):
        if attack_order[idx] in ugraph:
            ugraph.pop(attack_order[idx])
        for keys in ugraph:
            if attack_order[idx] in ugraph[keys]:
                ugraph[keys].remove(attack_order[idx])
        clst.append(largest_cc_size(ugraph))
        
    return clst

class Queue:
    def __init__(self):
        self._items = []
    def __len__(self):
        return len(self._items)
    def __iter__(self):
        for item in self._items:
            yield item
    def __str__(self):
        return str(self._items)
    def enqueue(self, item):      
        self._items.append(item)
    def dequeue(self):
        return self._items.pop(0)
    def clear(self):
        self._items = []

def ER(num_nodes, prob):
    graph = {}
    for node in range(num_nodes):
        graph[node] = set([])
    for node_i in range(num_nodes):
        for node_j in range(num_nodes):
            if node_i != node_j and prob >= random.random():
                graph[node_i].add(node_j)
                graph[node_j].add(node_i)
    return graph

class UPATrial:
    def __init__(self, num_nodes):
        self._num_nodes = num_nodes
        self._node_numbers = [node for node in range(num_nodes) for dummy_idx in range(num_nodes)]
    def run_trial(self, num_nodes):
        new_node_neighbors = set()
        for _ in range(num_nodes):
            new_node_neighbors.add(random.choice(self._node_numbers))
        self._node_numbers.append(self._num_nodes)
        for dummy_idx in range(len(new_node_neighbors)):
            self._node_numbers.append(self._num_nodes)
        self._node_numbers.extend(list(new_node_neighbors))
        self._num_nodes += 1
        return new_node_neighbors
    
def UPA(total_number_of_nodes, initial_number_of_nodes, num_edges):
    ugraph = ER(initial_number_of_nodes, 1)
    random_connect = UPATrial(initial_number_of_nodes)
    for new_node in range(initial_number_of_nodes, total_number_of_nodes):
        new_edges = random_connect.run_trial(num_edges)
        ugraph[new_node] = new_edges
        for old_node in new_edges:
            ugraph[old_node].add(new_node)
    return ugraph
    
lst = range(1239)
random.shuffle(lst)
res = compute_resilience(graph,lst)
